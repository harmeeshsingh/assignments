## ASSIGNMENT 1 : Basic Linux Commands

Create a utility(FileManager.sh) that will be able to
- Create a Directory
- Delete a Directory
- List Content of a Directory
- Only list files in a Directory
- Only listDirs in a Directory
- listAll(files and directory)


For example
```
./FileManager.sh addDir /tmp dir1
./FileManager.sh addDir /tmp dir2
./FileManager.sh addDir /tmp dir3
./FileManager.sh listFiles /tmp
./FileManager.sh listDirs /tmp
./FileManager.sh listAll /tmp
./FileManager.sh deleteDir /tmp dir3

```



Update FileManager to process Files as well
- Create a file
- Add content to file
- Add conent at the begining of the file
- Show top n lines of a file
- Show last n lines of a file
- Show contents of a specific line number
- Show conteint of a specfific line number range
- Move/Copy file from one location to another
- Delete file

For example
```
./FileManager.sh addFile /tmp/dir1 file1.txt
./FileManager.sh addFile /tmp/dir1 file1.txt "Initial Content"
./FileManager.sh addContentToFile /tmp/dir1 file1.txt "Additional Content"
./FileManager.sh addContentToFileBegining /tmp/dir1 file1.txt "Additional Content"
./FileManager.sh showFileBeginingContent /tmp/dir1 file1.txt 5
./FileManager.sh showFileEndContent /tmp/dir1 file1.txt 5
./FileManager.sh showFileContentAtLine /tmp/dir1 file1.txt 10
./FileManager.sh showFileContentForLineRange /tmp/dir1 file1.txt 5 10
./FileManager.sh moveFile /tmp/dir1/file1.txt /tmp/dir1/file2.txt
./FileManager.sh moveFile /tmp/dir1/file2.txt /tmp/dir2/
./FileManager.sh copyFile /tmp/dir2/file2.txt /tmp/dir1/
./FileManager.sh copyFile /tmp/dir1/file2.txt /tmp/dir1/file3.txt
./FileManager.sh clearFileContent /tmp/dir1 file3.txt
./FileManager.sh deleteFile /tmp/dir1 file2.txt

```
Note: Do not use sed command.Try to do this assignment only with linux basic commands
ASSIGNMENT 2
Please find your assignment for today (Day2)
	UserManager utility
	Add NinjaTeam (Simulate Group) ex: team1
	Add a User (Simulate) under a team ex: Nitish added to team1
	Ensure below constraints are met:
	A user should have read,write, execute access to home directory
	All the users of same team should have read and excute access to home directory of fellow team members.
	others should have only execute permission to userâ€™s home directory
	In home directory of every user there should be 2 shared directories
	team: Same team members will have full access
	ninja: All ninja's will have full access
```       
i.e
./UserManager.sh addTeam amigo
./UserManager.sh addTeam unixkings
./UserManager.sh addUser Rakesh amigo
./UserManager.sh addUser Sandeep unixkings
Resultant Structure
/home
	Rakesh
	team
	ninja
	Sandeep
	team
	ninja
```
##  Additional Features
	change user Shell
	change user password
	Delete user
	Delete Group
	list user or Team
```   
i.e
./UserManager.sh delTeam amigo
./UserManager.sh delUser Rakesh
./UserManager.sh changePasswd Rakesh
./UserManager.sh changeShell Rakehs /bin/bash
./UserManager.sh ls User
./UserManager.sh ls Team
# ASSIGNMENT 3
## Part A
Please find your assignment for today 

Create a shell script to generate a star, it will take 2 arguments size & type
```
./drawStar.sh 5 t1
    *
   **
  ***
 ****
*****
```

```
./drawStar.sh 5 t2
*
**
***
****
*****
```

```
./drawStar.sh 5 t3
    *
   ***
  *****
 *******
*********
```

```
./drawStar.sh 5 t4
*****
****
***
**
*
```

```
./drawStar.sh 5 t5
*****
 ****
  ***
   **
    *
```

```
./drawStar.sh 5 t6
*********
 *******
  *****
   ***
    *
```

```
./drawStar.sh 5 t7
    *
   ***
  *****
 *******
*********
 *******
  *****
   ***
    *
```

## Part B
Create a shell script that will take take a number and print below output depending on the conditions
- tom -> If number is divisible by 3
- cat -> If number is divisible by 5
- tomcat -> If number is divisible by 15
```
i.e
./printTomcat.sh 7

./printTomcat.sh 6
tom

./printTomcat.sh 10
cat

./printTomcat.sh 30
tomcat
```








ASSIGNMENT 4
Create a utility otssh, this utility will have below features

1. add ssh connect
2. list ssh connection
3. update ssh connection
4. delete ssh connection
5. Connect


1. Add ssh connection

$ otssh -a -n server1 -h 192.168.21.30 -u kirti (add user kirti to connect 192.168.21.30 with name server1 with default ssh setting)
$ otssh -a -n server2 -h 192.168.42.34 -u kirti -p 2022 (add user kirti to connect 192.168.42.34 with name server2 with port 2022 and default ssh setting)
$ otssh -a -n server3 -h 192.168.46.34 -u ubuntu -p 2022 -i ~/.ssh/server3.pem (add user ubuntu to connect 192.168.46.34 with name server3 with port 2022 and ssh key file ~/.ssh/server3.pem and default ssh setting)




2. List ssh connection

i.e 
$ otssh ls (This should list the name of all connection added using utility)
server1
server2
server3
$ otssh ls -d (This should list the name of all connection with details added using utility)
server1: ssh user@server1
server2: ssh -p 2022 user@server2
server3: ssh -i ~/.ssh/server3.pem -p 2022 user3@server3




3. Update ssh connection (This should update the settings for connection mentioned after name)

$ otssh -u -n server1 -h server1 -u user1
$ otssh -u -n server2 -h server2 -u user2 -p 2022

$ otssh ls -d
server1: ssh user1@server1
server2: ssh -p 2022 user2@server2
server3: ssh -i ~/.ssh/server3.pem -p 2022 user3@server3



4. Delete ssh connection (This should Delete the mentioned connection)

$ otssh rm server1
$ otssh rm server2

$ otssh ls -d
server3: ssh -i ~/.ssh/server3.pem -p 2022 user3@server3

5. Connect to server (This should connect to the server mentioned with details added using utility)

$ otssh server1
[ERROR]: Server information is not available, please add server first
$ otssh server2
[ERROR]: Server information is not available, please add server first
$ otssh server3
Connecting to server3 on 2022 port as user3 via ~/.ssh/server3.pem key





# ASSIGNMENT 5
## Part A

Create a template engine, that can generate values file and replace the variables provided as arguments
```
./teplateEngine.sh template.file key1=value1 key2=value2....
```

trainer.template
```
{{fname}} is trainer of {{topic}} 
```
```
i.e 
./teplateEngine.sh <template file> fname=sandeep topic=linux

sandeep is trainer of linux 
```

## Part B
Create a text editor utility, using which you can

- Add a line at top
- Add a line at bottom
- Add a line at specific line number
- Replace word
- Delete word
- Insert word
- Delete a line
- Delete a line containeing a word

```
./otTextEditor addLineTop <file> <line>
./otTextEditor addLineBottom <file> <line>
./otTextEditor addLineAt <file> <linenumber> <line>
./otTextEditor updateFirstWord <file> <word> <word2>
./otTextEditor updateAllWords <file> <word> <word2>
./otTextEditor insertWord <file> <word1> <word2> <word to be inserted>
./otTextEditor deleteLine <file> <line no>
./otTextEditor deleteLine <file> <line no> <word>
```
Also come with your own features of text editor


ASSIGNMENT 6
Part A
Please find your assignment for today
	Create a process management utility, to find
	Top n process by memory
	Top n process by cpu
	Kill process having least priority
	running duration of a process by name or pid
	List orphan process if any
	List zoombie process if any
	Kill process by name or pid
	List process that are waiting for the resources
i.e.
./ otProcessManager topProcess 5 memory
./ otProcessManager topProcess 10 cpu
./ otProcessManager killLeastPriorityProcess 
./ otProcessManager RunningDurationProcess <processName>/<processID>
./ otProcessManager listOrphanProcess
./ otProcessManager listZoombieProcess
./ otProcessManager killProcess <processName>/<processID>
./ otProcessManager ListWaitingProcess
Part B
Process Manager utility
	Create a ProcessManager utility that will perform below operation:
	register a service which it will start as a daemon service( it will register script path and one alias to this service)
	start a particular service
	show the status of particular service(shows whether a service is running or not)
	stop a particular service
	change the priority of any service
	list the details of particular service started by this utility
i.e.
./ProcessManager.sh -o register -s <path> -a <alias> -> Register Process
./ProcessManager.sh -o start -a <alias> -> Start Process
./ProcessManager.sh -o status  -a <alias> -> status of  processes
./ProcessManager.sh -o kill -a <alias> -> Kill process
./ProcessManager.sh -o priority -p <low/med/high> -a <alias> -> change priority
./ProcessManager.sh -o list  
output:
service2
service1
service3
./ProcessManager.sh -o top [-a <alias>] -> List process details
output:
 alias, PID, State, Priority, Script
Part C
	Let's play around with process:
	clear a log file of running process
	delete a log file of running process and see what happens to process
	elevate the priority of a process



## Git Assignment 7

#=======================================================================
## PART A
#=======================================================================

- Create a folder ninja at the root level of your cloned code
- Add a file README.md with content "Trying fast forward merge" in  ninja folder
- Create a branch ninja and move to it
- Run git status command
- Commit your changes to ninja branch
- Merge ninja branch to master branch make sure that a new commit get's created
- Assuming you are in the master branch, modify README.md with content "Changes in master branch", commit the changes in master branch.
- Switch to ninja branch, modify README.md with content "Changes in ninja branch", commit the changes in ninja branch.
- Merge the ninja branch to the master branch in such a fashion that a merge conflict is generated and resolve it using the ours and theirs concept so that the changes of the ninja branch overrides changes in master branch.

## Good To Do
- Simulate the above scenarios using rebase

#=======================================================================
## PART B
#=======================================================================

- Write a script to manage branches
    - Must
        - List branches
        - Create branch
        - Delete branch
        - Merge 2 branches
        - Rebase 2 branches
e.g:
```
./gitBranches.sh  -l 

output: 
master 
ninja

./gitBranch.sh -b <branch_name>
./gitBranch.sh -d <branch_name>
./gitBranch.sh -m -1 <branch_name1> -2 <branch_name2> ----> which means branch_name1 branch is going to merge into branch_name2 branch 
./gitBranch.sh -r -1 <branch_name1> -2 <branch_name2>---- which means branch_name1 branch is going to rebase on branch_name2 branch
```
#=======================================================================
## PART C
#=======================================================================
- Write a script to manage tags
    - Must
        - Create tag
        - List tags
        - Delete tag
e.g:        
```
./gitTags.sh  -t <tag_name>
./gitTags.sh  -t ninja_1.0
./gitTags.sh  -t ninja_1.1
./gitTags.sh  -l 
output :
ninja_1.0
ninja_1.1
./gitTags.sh  -d <tag_name>
./gitTags.sh  -d ninja_1.0
````
#=======================================================================
## PART D
#=======================================================================
- Write a script to generate commit report of a repo
    - Input
        - Repo url
        - days for which report to be generated
    - Output
        - Commit Id
        - Author name
        - Autoher EMail
        - Commit Message
        - Changed Files lists
    - Must Do
        - Report in html or csv format
    - Optional
        - An additional column showing if commit is valid or not
            - A commit is valide if it starts with pattern JIRA-XXXX: 
        
e.g :
```     
./gitCommitReport.sh -u <url> -d <days>
./gitCommitReport.sh -u https://github.com/opstree/spring3hibernate.git -d 40 
```
output:
```
Fri Dec 9 15:49:41 2022 +0530 | Sandeep | sandeep@opstree.com | Updated path to correct value
Sat Dec 3 10:28:04 2022 +0530 | Sandeep Rawat | sandeep@opstree.com | Merge pull request #40 from opstree/msk-tf-files
Fri Dec 2 18:16:18 2022 +0530 | priyanshichauhan0707 | priyanshichauhan0707@gmail.com | renamed data_network.tf
Fri Dec 2 17:52:09 2022 +0530 | priyanshichauhan0707 | priyanshichauhan0707@gmail.com | added _override.tf, backend.tf and data.tf
Fri Dec 2 11:59:55 2022 +0530 | Sandeep | sandeep@opstree.com | Added capability to fetch & store state in S3



# Assignment 8
Create a utility to manage build operations of a maven based java project such as:
- Mandatory
   - Genreate the artifact of project
   - Upload the artifact of project to local repo
   - Perform static code analysis of project using any of the tool, which will be provided as an argument in commandline
       - checkstyle
       - findbugs
       - pmd
       - Perform unit test case analysis of the project and let user give an option to either generate report in csv/xml/html for
            - Unit tests status
            - code coverage status
   - deploy the artifact to websever(tomcat)         
- Optional
   - Generate documentation of an  application
   - Update build definition to fail build if various thresholds are not met in 
      - checkstyle
      - findbugs
      - pmd
      - code coverage
Repo link : https://github.com/opstree/spring3hibernate.git
i.e 
./buildMaven.sh -a 
./buildMaven.sh -i 
./buildMaven.sh -s checkstyle
./buildMaven.sh -s findbugs
./buildMaven.sh -s pmd
./buildMaven.sh -t <unit_test_plugin_name>
./buildMaven.sh -d 
flag help
a : to generate a artifact
i : to install the artifact to local repo 
s : to do  any static code analysis 
t : to do any unit testing
d : to deploy the artifact



                                                    ANSIBLE


ANSIBLE ASSIGNMENT-1
Complete the following steps with the help of ansible modules:

UserManager:
Add NinjaTeam (Simulate Group) ex: team1
Add a User (Simulate) under a team ex: Nitish added to team1 Ensure below constraints are met:
A user should have read,write, execute access to home directory
All the users of same team should have read and excute access to home directory of fellow team members.
In home directory of every user there should be 2 shared directories
Team: Same team members will have full access
Ninja: All ninja's will have full access
Additional Features:

Change user Shell
Change user password
Delete user
Delete Group
List user or Team





Ansible Assignment-2

Install nginx in your servers(more then 2) and make sure the log files of nginx should not be granted more than 1 GB space on the nodes
Create equal number of websites as per your team  members and every members website should be hosted for only 2 hours and after every 2 hours another website should start displaying.
    - First 2 hours <team>.opstree.com should display content of tanya website
    - Next 2 hours <team>.opstree.com should display content of Heena website

Install Apache
Also Configure nginx to run as reverse proxy to apache after completing first point individually.


- Run the ansible commands in such a way that workers nodes are updated one by one and not altogether and also make sure using all type of strategies.




Ansible Assignment-3

Setup an entire infra using ansible playbook on aws
Setup Spring3HibernateApp (https://github.com/opstree/spring3hibernate) on created infra using ansible playbook by following the below steps:
Install MySQL
Create the war file for Spring3HibernateApp using maven
Install JDK 11
Install Tomcat
Send the war file created earlier to path "/opt/tomcat/apache-tomcat-7.0.108/webapps/"
Restart tomcat service
(edited)
opstree/spring3hibernate
A java loaded application for various testing purpose
Website
https://opstree.github.io


Ansible Assignment-4
Create a System manager ansible role with below feature

I should be able to manage softwares that needs to be installed
I should be able to manage user's on the system
I should be able to manage various git repository
Various folder structures that should exist on a VM
Think of other system specific settings that you should manage


Ansible Assignment-5
Role on the assigned tool with following features: - Should be able to install version specific - Should be OS independent - COnfiguration should be variablelized - Try using jinja template - It should include Templates for the configuration files with all the dynamic value that needs to be updated. - It should include handlers ,but not along with the task. - User should have the options to execute the role on centos or ubuntu or together on both.

                          Jenkins

Jenkins Assignment 1:

You are tasked with creating below Jenkins utilities to control operations in a Git repository.
- Branch Exist:
    - Check if a specified branch exists in the repository.
- Create Branch:
    - Create a new branch in the repository.
- Merge 2 Branches:
    - Merge two branches
    - In case of failure generate an HTML report
- Delete Branch:
    Delete a specified branch in the repository.
- List commit logs of Certain Branch
    - Should be able to accept search parameters
    - Should show it in HTML report
Good to do:
    - Managed these jobs via JOB DSL


Assignment 2:


Topics Covered:  (User Authentication, User Authorization)
     Assignment on Authentication and Authorization
        Their is an organization which has 3 teams
            - Developer
            - Devops
            - Testing
        First you need to create 9 dummy jenkins jobs.Each job will print their jobname, build number.
            For Developer create 3 dummy jobs.In developer view
                job1:- dev-1
                job2:- dev-2
                job3:- dev-3
            For Testing create 3 dummy jobs. In testing view
                job1:- test-1
                job2:- test-2
                job3:- test-3
            For Devops create 3 dummy jobs. In devops view
                job1:- devops-1
                job2:- devops-2
                job3:- devops-3
        Users in each team: 
            developer: [ They can see only dev jobs, can build it, see workspace and configure it ]
                - developer-1 
                - developer-2 
            testing: [ They can see all test jobs ,can build it, see workspace and can configure it, | They can also view dev jobs ]
                - testing-1 
                - testing-2 
            devops:  [ They can see all devops jobs ,can build it, see workspace and can configure it, | They can also view dev and test jobs  ]
                - devops-1 
                - devops-2
            admin
                -  admin-1 [ It will have full access ]
        See what Authorization strategy suits it and implement it.
        Also go through all authorization strategy
        Legacy mode
        Project Based
        Matrix Based
        Role-Based
        Point 2:-
        Enable SSO with Goggle




To install jenkins in ubuntu

udo wget -O /usr/share/keyrings/jenkins-keyring.asc https://pkg.jenkins.io/debian/jenkins.io-2023.key
[2:58 PM] echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian binary/ | sudo tee /etc/apt/sources.list.d/jenkins.list > /dev/null
[2:58 PM] sudo apt-get update
[2:59 PM] sudo apt-get install jenkins
[2:59 PM] sudo apt update
[2:59 PM] sudo apt install fontconfig openjdk-17-jre
[2:59 PM] java -version


Assignment 03:
Perform CI checks on three Repositories using Jenkins, store reports, manage artifacts, set up failure notifications, and automate the process using DSL job.

API Repositories:

- Python:- https://github.com/OT-MICROSERVICES/attendance-api
- GoLang:- https://github.com/OT-MICROSERVICES/employee-api
- Java:- https://github.com/OT-MICROSERVICES/salary-api

Jenkins Freestyle Jobs:
Create separate jobs for each check.
Configure to pull repositories from GitHub.
- Implement Generic & Advance CI Checks (eg: Credential Scanning, Unit Testing, Code Coverage, Dependency etc.)
- Store and access reports within Jenkins.
- Choose local or remote storage for artifact.
- Configure email, Slack, or Telegram notifications on CI check failures.
Now,Implement a DSL job to automate the entire process for CI checks on all APIs.


Assignment:-04
1. Perform CI Checks On Below Apis Using Declarative Pipeline
    (eg: clean, clone, cred scan, unit test, code coverage, dependency check etc. ).
    {Mandatory} - Java:- https://github.com/OT-MICROSERVICES/salary-api
    {Optional}  - GoLang:- https://github.com/OT-MICROSERVICES/employee-api
    {Optional}  - Python:- https://github.com/OT-MICROSERVICES/attendance-api
 3. Should store Reports of ALL CI checks.
 4. Artifact should be stored locally or remote. 
 4. Notification should be sent email/slack/telegram.
 Optional:- 
    - Try Same with scripted pipeline.


Assignment_05 : Assignment on configuring Nodes
 
1] Configure an Ubuntu node using the execution of a command on the master method. 
         - Make sure at any point in time, a maximum of 5 jobs can be executed on this node.
         - Assign this node to Assignment 1

2] Configure a RHEL node using  Launch slave agents via SSH method. 
         - Make sure at any point of time a maximum of 2 jobs can be executed on this node.
         - Assign this node to Assignment 2 

3] Configure a CentOS node using Launch slave agents via SSH method. 
         - Make sure at any point in time a maximum of 3 jobs can be executed on this node.
         - Assign this node to Assignment 3



                                            Aws assignments

Assignment-2

"""Suppose your client has infrastructure running over the AWS cloud, but for the past few days, the client application has not been able to handle enough traffic and load, so he is thinking of setting up any reverse proxy for handling the load as middleware. He called you from the DevOps team and explained the problem statement. You have explained very well about the plan and design that you are going to perform.""" 

You were told that nginx needs to be set up in between your client and application service, which can handle the request, but we need to setup one more thing, which is the basic HA (high availability) and DR (disaster recovery) of that middleware setup. Tasks would be done day-wise.

Day 1: 
- Create instance and install nginx on that, after that create an AMI-1
- Create instance from the above AMI-1 and make V1
- Do some changes in same instance and  again create AMI-2 
- Create instance from the above AMI-2 and make V2
- Make both V1 and V2 AMI's 
- Now you have 2 AMI's total 

You have to continue the strategy with autoscaling group, attach asg on LB and follow the same strategy and make this highly available by testing load test on the nginx server so that it would autoscale at the time of load.
 
Attach the policy to asg and increase the stress according to policy mentioned then analyse the result. ( Try every policy )
    - Avg CPU utilization
    - Network bytes in/out
    - ALB requests count per target.
Somehow client needs version upgrade in Nginx so please upgrade V1 to V2 that you have made

"""But the client has complained to us that our new version V2 is not compatible with the service, so please revert back. You need to revert back to the previous version. """

Day 2: """Client has told you about the change in it's Nginx as he needs this tool as hosting webpage too, so you need to plan accordingly. Also, he has specially mentioned that all tasks should be performed from their AWS environment, which means all O/P would be done through EC2 only. """

- You need to pull image content which would be display at the time of webpage hosting from VCS git and push your images on S3 bucket using aws-cli. (Do not use secrete and access keys)

- You need to create a frontend including images in nginx page which will be fetched directly from S3 bucket.

Day3:
"""Now client has again told us to test it continuously to see if ASG is working or not if my server got unhealthy.""" 

Enter in the server and make some changes in server in order to make server unhealthy. Now analyze the result to see how ASG can help you to maintain your instance desire state.

==========================================
(Remember the special points from client)
NOTE 1: You need to create the utility in such a way that it will make AMI of specific version and attach to the asg and perform the rolling deployment strategie. In case of revert back you should also have the function of revert back feature. 

NOTE 2: But always remember first do it all the tasks manually.
==========================================

GOOD TO DO:
Do the whole automation with Blue Green Deployment and add CloudFront in front of Load Balancer to access the website in order to overcome latency.
Continue to the previous assignment 1 and use your both nginx AMI's for displaying webpage and use your images from S3 bucket.

Day4:
"""Client called devOps and asked if it was possible to get the two different details with single LB DNS, as he has two webpages and wants to pass the traffic through a single ALB but with a different path, like app.opstree.com/path1 or app.opstree.com/path2. """ 

You have told him yes, it is possible with path-based routing in the ALB. Now do the following:

## Use existing Nginx and there should be 1 ec2 in each private subnet .
    - 1 bastion host in public subnet .
    - port 22 of bastion host should only accessible from your public ip.
    - nginx welcome page with path '/ninja1' on first ec2 should display `Image-1`.
    - nginx welcome page with path '/ninja2' on second ec2 should display `Image-2`.
    - port 22 of  both the nginx servers should only be accessible from  bastion host.

## Create target group for each nginx server. (2 servers)
## Create Application load balancer.
    - port 80 open of nginx server should only be accessible from your ALB.
    - port 80 open of ALB should only be accessible from your public IP.
    - ALB should only be accessible though your public IP none else.
    - create listener rule so that {YOUR-ALB-DNS-NAME}/ninja1 should display welcome page of first ec2.
    - create listener rule so that {YOUR-ALB-DNS-NAME}/ninja2 should display welcome page of second ec2.

## Push all the updated images of the webpage to S3 bucket defined folders through any EC2 instance and maintain repo on that server only.

Day5: 
"""Client asked for S3 service and bucket to be deployed in the US-East-1 region and segregate the folders with env names with proper restrictions."""

## You need to create a IAM user and a S3 Bucket on any of the region, Kindly follow as mentioned below :
 - Create 2 folders prod and nonprod inside that bucket.
 - Upload any different image files inside both folders.
 - Create a role for the above specific task and it should only be access S3 full access
 - A bucket should only be accessible from your both root, IAM user and nginx application.
 - Restrict the access of IAM user to not access prod folder but able to access the nonprod folder.
 - Set IAM and bucket policies in such a way that it accomplished the above points.

Day6:
"""Client facing issue with some policy in IAM. Earlier,  he assigned one policy to S3, but if he assigned the same to CDN, then it showed an error. He called the devOps for this anonymous issue.""" 

DevOps told him that it needs to be validated through a trust relationship in the IAM service

## suppose organization wants to get the page access quick, so you need to implement CDN and fetch the images through CDN instead S3, use same role in the CDN which you are using in EC2 without any modification of policy.

## Make your own IAM user and assign minimal permissions to yourself for this task.



=============
Assingment-1
=============

In this assignment you have to learn about deployment strategies:
    - Recreate deployment 
    - Rolling deployment 
    - Blue-green deployment 
    - A/B  deployment
    - Canary deployment 

After this you need to implement these 2 below deployment strategies:
Must Do
    - Recreate deployment 
    - Rolling deployment 
Good to  Do
    - Blue Green deployment 
    - Canary deployment 

Recommendation
    - Don't straight forward jump into creating the utility, first do it manually

github-link --> https://github.com/OT-TRAINING/DeploymentStrategies

Hint :
1. Use ASG
2. Use LB
3. Use EC2 service
4. Use AMI Snapshot


Assignment-3

## Infrastructure as a Code
### Task Description 

- Create the following resources using terraform resource block :
    - Create 1 VPC 
        - eg : `ninja-vpc-01`
    - Create 4 Subnet
        - 2 public subnet
            - eg : `ninja-pub-sub-01/02`
        - 2 private subnet
            - eg : `ninja-priv-sub-01/02`
    - Create instances in it ( bastion and private instance)
    - Create 1 IGW
        - eg : `ninja-igw-01`
    - Create 1 NAT 
        - eg : `ninja-nat-01`
    - Create 2 Route Table
        - 1 for public subnet
            - eg : `ninja-route-pub-01/02`
        - 1 for private subnet
            - eg : `ninja-route-priv-01/02`

**Note: Make maximum use of variables and output files**


assignment-4

## Category
- AWS Resources
- Terraform modules
- Terraform State management and state locking

## Details

In this assignment, we will create an end-to-end infrastructure using Terraform modules.

## Must Do
- Create the following resources using terraform resource block :
    - Create 1 VPC 
        - eg : `ninja-vpc-01`
    - Create 4 Subnet
        - 2 public subnet
            - eg : `ninja-pub-sub-01/02`
        - 2 private subnet
            - eg : `ninja-priv-sub-01/02`
    - Create instances in it ( bastion and private instance)
    - Create 1 IGW
        - eg : `ninja-igw-01`
    - Create 1 NAT 
        - eg : `ninja-nat-01`
    - Create 2 Route Table
        - 1 for public subnet
            - eg : `ninja-route-pub-01/02`
        - 1 for private subnet
            - eg : `ninja-route-priv-01/02`

- call the root modules using wrapper code for reusability
- Achieve terrafom state managemnet using S3 and terrafom state locking using dynamodb.

NOTE: Please make maximum use of variables and output file 

## Good to Do
- Convert your code in two modules named Network and Security
- Use data source while calling modules.

## References
- https://www.terraform.io/docs
- https://registry.terraform.io/providers/hashicorp/aws/latest/docs



                            Docker
Assignment-1


Part1

Create a utility to host a static website via Docker with below features:

    - The website should be accessed via your team domain name i.e
        - <name>.<team-name>.com
        - mohan.ntd.com
    - The website should be up and running in below intervals
        - 10-12
        - 4-6
    - Modify the utility so that in which first half it would be printing your name and in second half your buddy name. i.e below will be the output of curl command
        - 10-12 | Hello from Mohan
        - 4-6 | Hell from Pankaj
        
Part2

Create a new container.

Create One directory Structure:

Data

 Ninjas

   Mohan
   Uma
   Shikha
   Mayank

Now make sure that if this container is getting run by Mohan then Mohan should be able to Write on Mohand Directory only and for others Mohan should only be able to read it.



ASSIGNMENT2

Create a DockerFile.
    Use Ubuntu latest image.
    Add your name as a Manintainer.
    Update local packages using command (apt-get update).
    Install nodejs package.
    Install npm package.
    Create a symlink using command (ln -s /usr/bin/nodejs /usr/bin/node).
    Trigger a command (npm install -g http-server)
    Add any test index.html file from local at /usr/apps/hello-docker/index.html on container.
    change your working directory to /usr/apps/hello-docker/.
    Run a command (http-server -s) on every container initialization.
    Build your dockerfile and tag it with "yourname:docker-web"
    Run a docker container from the image that you have just created and map container 8080 port to host 8080 port.(8080:8080)
    Try accessing your webpage using "http://<virtualmachine_ipaddress>:8080/index.html" URL.
    Delete docker container and image from local


ASSIGNMENT3
  Create a file named index.js with below content.
    index.js
    var os = require("os"); var hostname = os.hostname(); console.log("hello from " + hostname);
    Create a file named Dockerfile and write code as per the steps mentioned.
    Use alpine image.
    Add Author/Maintainer name in DockerFile
    run commands -> apk update & apk add nodejs
    copy current directory to /app
    change your working directory to /app
    specify the default command to be run upon container creation as mentioned below. node index.js
    Build image from Dockerfile.
    Tag image with name "hello:v0.1"



Assigment-4
In this assignment we will be working on Docker-Compose file in pair of 2, for our OT-Microservice App:
Step1: Setup the OT-MICROSERVICE  application fully Clone the code and run the app .
Step2: Now delete the code from your local system and run the app fully
Step3: Now your buddy in his/her system without cloning the code will run the app fully.
Step4: Ensure your Employee, Salary and Attendance service are highly available.
Bonus Assignment: Also Explore other power features of docker compose i.e You only want to run Attendance and MySQL container.


5
**************ASSIGNMENT****************************
In this Assignment we will be creating pods for our OT-MICROSERVICE Application:
Step1: Attendance Setup
    - Option 1:
        * Run MySQL in one pod
        * Run attendance in one pod
    - Option 2:
        * Attendance & MySQL in one pod
    - Validation

Step2:
    - Run ES pod
        * Validation
    - Run Salary pod
        * Ensure connectivity with ES pod
        * Validation
    - Run Employee pod
        * Ensure connectivity with ES pod
        * Validation

Step3:
    - Run Frontend pod
        * Validation
    - Run Webserver pod
        * Validation
        


******************ASSIGNMENT**************************
In this assignment we will try to understand what Deployments and RelicaSets are in K8s.
This time try to deploy OT-Microservice Application using Deployments and ReplicaSets.
